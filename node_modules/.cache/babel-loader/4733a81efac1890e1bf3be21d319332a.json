{"ast":null,"code":"var _jsxFileName = \"/home/chris/repos/StarkClass_Server/client/src/components/Ciclos/TimeCounter.js\";\nimport React, { useState, useEffect } from \"react\";\nimport Countdown from \"react-countdown\";\nexport default function TimeCounter({\n  hr\n}) {\n  console.log(\"date => \" + Date.now());\n\n  const Completionist = () => /*#__PURE__*/React.createElement(\"span\", {\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 5,\n      columnNumber: 31\n    }\n  }, \"BOo0o0o0M!!!!!\");\n\n  const renderer = ({\n    hours,\n    minutes,\n    seconds,\n    completed\n  }) => {\n    if (completed) {\n      // Render a complete state\n      return /*#__PURE__*/React.createElement(Completionist, {\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 10,\n          columnNumber: 14\n        }\n      });\n    } else {\n      // Render a countdown\n      return /*#__PURE__*/React.createElement(\"div\", {\n        style: {\n          display: \"flex\",\n          flexWrap: \"wrap\",\n          justifyContent: \"space-evenly\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 14,\n          columnNumber: 9\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          marginTop: \"30px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 21,\n          columnNumber: 11\n        }\n      }, /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"black\",\n          padding: \"5px\",\n          borderColor: \"#FF4900\",\n          borderStyle: \"solid\",\n          borderRadius: \".5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 22,\n          columnNumber: 13\n        }\n      }, hours), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"#FF4900\",\n          fontSize: \"3rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 33,\n          columnNumber: 13\n        }\n      }, \" Hr \")), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          marginTop: \"30px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 35,\n          columnNumber: 11\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"black\",\n          padding: \"5px\",\n          borderColor: \"#FF4900\",\n          borderStyle: \"solid\",\n          borderRadius: \".5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 37,\n          columnNumber: 13\n        }\n      }, minutes), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"#FF4900\",\n          fontSize: \"3rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 48,\n          columnNumber: 13\n        }\n      }, \" min \")), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          marginTop: \"30px\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 50,\n          columnNumber: 11\n        }\n      }, \" \", /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"black\",\n          padding: \"5px\",\n          borderColor: \"#FF4900\",\n          borderStyle: \"solid\",\n          borderRadius: \".5rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 52,\n          columnNumber: 13\n        }\n      }, seconds), /*#__PURE__*/React.createElement(\"span\", {\n        style: {\n          color: \"#FF4900\",\n          fontSize: \"3rem\"\n        },\n        __self: this,\n        __source: {\n          fileName: _jsxFileName,\n          lineNumber: 64,\n          columnNumber: 13\n        }\n      }, \" seg \")));\n    }\n  };\n\n  const [date, setDate] = useState(\"\");\n  useEffect(() => {\n    if (date === \"\") {\n      localStorage.setItem(\"countdownTime\", Date.now());\n      setDate(localStorage.getItem(\"countdownTime\"));\n    }\n  }, [date]);\n  return /*#__PURE__*/React.createElement(Countdown, {\n    date: date + hr * 3600000,\n    renderer: renderer,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 77,\n      columnNumber: 10\n    }\n  });\n}","map":{"version":3,"sources":["/home/chris/repos/StarkClass_Server/client/src/components/Ciclos/TimeCounter.js"],"names":["React","useState","useEffect","Countdown","TimeCounter","hr","console","log","Date","now","Completionist","renderer","hours","minutes","seconds","completed","display","flexWrap","justifyContent","marginTop","color","padding","borderColor","borderStyle","borderRadius","fontSize","date","setDate","localStorage","setItem","getItem"],"mappings":"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","sourcesContent":["import React, { useState, useEffect } from \"react\";\nimport Countdown from \"react-countdown\";\nexport default function TimeCounter({ hr }) {\n  console.log(\"date => \" + Date.now());\n  const Completionist = () => <span>BOo0o0o0M!!!!!</span>;\n\n  const renderer = ({ hours, minutes, seconds, completed }) => {\n    if (completed) {\n      // Render a complete state\n      return <Completionist />;\n    } else {\n      // Render a countdown\n      return (\n        <div\n          style={{\n            display: \"flex\",\n            flexWrap: \"wrap\",\n            justifyContent: \"space-evenly\",\n          }}\n        >\n          <span style={{ marginTop: \"30px\" }}>\n            <span\n              style={{\n                color: \"black\",\n                padding: \"5px\",\n                borderColor: \"#FF4900\",\n                borderStyle: \"solid\",\n                borderRadius: \".5rem\",\n              }}\n            >\n              {hours}\n            </span>\n            <span style={{ color: \"#FF4900\", fontSize: \"3rem\" }}> Hr </span>\n          </span>\n          <span style={{ marginTop: \"30px\" }}>\n            {\" \"}\n            <span\n              style={{\n                color: \"black\",\n                padding: \"5px\",\n                borderColor: \"#FF4900\",\n                borderStyle: \"solid\",\n                borderRadius: \".5rem\",\n              }}\n            >\n              {minutes}\n            </span>\n            <span style={{ color: \"#FF4900\", fontSize: \"3rem\" }}> min </span>\n          </span>\n          <span style={{ marginTop: \"30px\" }}>\n            {\" \"}\n            <span\n              style={{\n                color: \"black\",\n                padding: \"5px\",\n\n                borderColor: \"#FF4900\",\n                borderStyle: \"solid\",\n                borderRadius: \".5rem\",\n              }}\n            >\n              {seconds}\n            </span>\n            <span style={{ color: \"#FF4900\", fontSize: \"3rem\" }}> seg </span>\n          </span>\n        </div>\n      );\n    }\n  };\n  const [date, setDate] = useState(\"\");\n  useEffect(() => {\n    if (date === \"\") {\n      localStorage.setItem(\"countdownTime\", Date.now());\n      setDate(localStorage.getItem(\"countdownTime\"));\n    }\n  }, [date]);\n  return <Countdown date={date + hr * 3600000} renderer={renderer} />;\n}\n"]},"metadata":{},"sourceType":"module"}