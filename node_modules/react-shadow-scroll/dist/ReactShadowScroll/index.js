"use strict";

var _interopRequireWildcard = require("@babel/runtime/helpers/interopRequireWildcard");

var _interopRequireDefault = require("@babel/runtime/helpers/interopRequireDefault");

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports["default"] = void 0;

var _extends2 = _interopRequireDefault(require("@babel/runtime/helpers/extends"));

var _slicedToArray2 = _interopRequireDefault(require("@babel/runtime/helpers/slicedToArray"));

var _objectWithoutProperties2 = _interopRequireDefault(require("@babel/runtime/helpers/objectWithoutProperties"));

var _react = _interopRequireWildcard(require("react"));

var _resizeObserverPolyfill = _interopRequireDefault(require("resize-observer-polyfill"));

var _propTypes = _interopRequireDefault(require("prop-types"));

var _reactJss = require("react-jss");

var ShadowScrollComponent = function ShadowScrollComponent(_ref) {
  var children = _ref.children,
      style = _ref.style,
      styleSubcontainer = _ref.styleSubcontainer,
      scrollPadding = _ref.scrollPadding,
      scrollColor = _ref.scrollColor,
      scrollWidth = _ref.scrollWidth,
      isShadow = _ref.isShadow,
      shadow = _ref.shadow,
      scrollColorHover = _ref.scrollColorHover,
      props = (0, _objectWithoutProperties2["default"])(_ref, ["children", "style", "styleSubcontainer", "scrollPadding", "scrollColor", "scrollWidth", "isShadow", "shadow", "scrollColorHover"]);
  var classes = useStyles({
    scrollPadding: scrollPadding,
    scrollColor: scrollColor,
    scrollWidth: scrollWidth,
    isShadow: isShadow,
    scrollColorHover: scrollColorHover,
    shadow: shadow
  });
  var ref = (0, _react.useRef)();

  var _useState = (0, _react.useState)(false),
      _useState2 = (0, _slicedToArray2["default"])(_useState, 2),
      scroll = _useState2[0],
      setScroll = _useState2[1];

  (0, _react.useLayoutEffect)(function () {
    var RO = new _resizeObserverPolyfill["default"](function () {
      if (ref.current.clientHeight < ref.current.scrollHeight) {
        setScroll(true);
      } else {
        setScroll(false);
      }
    });
    RO.observe(ref.current);
    return function () {
      RO.disconnect();
    };
  }, [ref]);
  return _react["default"].createElement("div", (0, _extends2["default"])({
    "aria-label": "container-scroll",
    style: style,
    className: "".concat(classes.container, " ").concat(scroll ? classes.containerScroll : '')
  }, props), _react["default"].createElement("div", {
    "aria-label": "subcontainer-scroll",
    ref: ref,
    className: classes.subcontainer,
    style: styleSubcontainer
  }, children));
};

var useStyles = (0, _reactJss.createUseStyles)({
  containerScroll: {
    boxShadow: function boxShadow(props) {
      return props.isShadow ? props.shadow : 'none';
    }
  },
  container: {
    width: '100%',
    overflowY: 'hidden',
    boxSizing: 'border-box',
    display: 'flex'
  },
  subcontainer: {
    paddingRight: function paddingRight(props) {
      return props.scrollPadding;
    },
    overflowY: 'auto',
    flex: '1',
    scrollbarColor: function scrollbarColor(props) {
      return props.scrollColor + ' transparent';
    },
    scrollbarWidth: 'thin',
    '&::-webkit-scrollbar': {
      width: function width(props) {
        return props.scrollWidth;
      },
      background: 'transparent'
    },
    '&::-webkit-scrollbar-track': {
      background: 'transparent'
    },
    '&::-webkit-scrollbar-thumb': {
      background: function background(props) {
        return props.scrollColor;
      },
      borderRadius: 5,
      overflow: 'hidden',
      '&:hover': {
        background: function background(props) {
          return props.scrollColorHover;
        }
      }
    }
  }
});
ShadowScrollComponent.propTypes = {
  scrollColor: _propTypes["default"].string,
  scrollColorHover: _propTypes["default"].string,
  scrollWidth: _propTypes["default"].number,
  isShadow: _propTypes["default"].bool,
  shadow: _propTypes["default"].string
};
ShadowScrollComponent.defaultProps = {
  scrollColor: '#c5c5c5',
  scrollColorHover: '#a6a6a6',
  scrollWidth: 8,
  scrollPadding: 0,
  isShadow: true,
  shadow: '0 2px 4px rgba(0, 0, 0, 0.2) inset, 0 -2px 4px rgba(0, 0, 0, 0.2) inset'
};

var _default = (0, _react.memo)(ShadowScrollComponent);

exports["default"] = _default;